// Generated by CoffeeScript 1.6.3
var JSTagger;

JSTagger = (function() {
  function JSTagger(fieldId) {
    this.fieldId = fieldId;
    this.setupField();
  }

  JSTagger.prototype.getFieldById = function() {
    return this.tagField = document.getElementById(this.fieldId);
  };

  JSTagger.prototype.fieldAddListener = function() {
    var self;
    self = this;
    if (this.tempInput.addEventListener) {
      this.tempInput.addEventListener('keypress', function(e) {
        return self.tempInputKeyPressed(e);
      }, false);
      return this.wrapper.addEventListener('click', function(e) {
        return self.wrapperClicked(e);
      }, false);
    } else if (this.tempInput.attachEvent) {
      this.tempInput.attachEvent('keypress', function(e) {
        return self.tempInputKeyPressed(e);
      });
      return this.tempInput.attachEvent('click', function(e) {
        return self.wrapperClicked(e);
      });
    }
  };

  JSTagger.prototype.fieldWrap = function() {
    this.createWrapper();
    this.tagField.parentNode.insertBefore(this.wrapper, this.tagField);
    this.tagField.parentNode.removeChild(this.tagField);
    return this.wrapper.appendChild(this.tagField);
  };

  JSTagger.prototype.createWrapper = function() {
    this.wrapper = document.createElement('div');
    this.wrapper.id = this.fieldId + "_wrapper";
    return this.wrapper.className = "jstagger_wrapper";
  };

  JSTagger.prototype.createTagArea = function() {
    this.tagArea = document.createElement('span');
    this.tagArea.id = this.fieldId + "_tag_area";
    return this.wrapper.insertBefore(this.tagArea, this.tagField);
  };

  JSTagger.prototype.createCloseBtn = function() {
    this.closeBtn = document.createElement('img');
    this.closeBtn.src = "img/blank.gif";
    return this.closeBtn.className = "jstagger_close_btn";
  };

  JSTagger.prototype.createtempInput = function() {
    this.tempInput = document.createElement('input');
    this.tempInput.id = this.fieldId + "_temp_input";
    this.tempInput.className = "jstagger_temp_input";
    return this.wrapper.insertBefore(this.tempInput, this.tagField);
  };

  JSTagger.prototype.setupField = function() {
    this.getFieldById();
    this.fieldWrap();
    this.createTagArea();
    this.createCloseBtn();
    this.createtempInput();
    this.fieldAddListener();
    return this.tagField.style.display = "none";
  };

  JSTagger.prototype.trimTag = function(str) {
    return str.replace(/^\s+|\s+$/g, '');
  };

  JSTagger.prototype.populateTagField = function() {
    var tag, tagNames, _i, _len, _ref;
    tagNames = [];
    _ref = this.tagArea.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tag = _ref[_i];
      tagNames.push(tag.innerText);
    }
    return this.tagField.value = tagNames.join(", ");
  };

  JSTagger.prototype.measureText = function(text) {
    var sizeDiv, width;
    sizeDiv = document.createElement('div');
    document.body.appendChild(sizeDiv);
    if (window.getComputedStyle) {
      sizeDiv.style = window.getComputedStyle(this.tempInput);
    } else {
      sizeDiv.style = this.tempInput.style;
    }
    sizeDiv.style.position = "absolute";
    sizeDiv.style.left = -1000;
    sizeDiv.style.top = -1000;
    sizeDiv.innerHTML = text;
    width = sizeDiv.clientWidth;
    document.body.removeChild(sizeDiv);
    sizeDiv = null;
    return width + 1;
  };

  JSTagger.prototype.resizeInput = function(charCode) {
    var text;
    if (charCode == null) {
      charCode = null;
    }
    text = this.tempInput.value;
    if (charCode) {
      text += String.fromCharCode(charCode);
    }
    text = text.replace(/\W/g, "_");
    return this.tempInput.style.width = this.measureText(text) + "px";
  };

  JSTagger.prototype.tempInputKeyPressed = function(e) {
    var tagSpan, tagStr;
    if (e.keyCode === 44) {
      e.stopPropagation();
      e.preventDefault();
      if (this.tempInput.value !== "") {
        tagStr = this.trimTag(this.tempInput.value);
        this.tempInput.value = "";
        tagSpan = document.createElement('span');
        tagSpan.className = "jstagger_tag";
        tagSpan.innerText = tagStr;
        tagSpan.appendChild(this.closeBtn.cloneNode());
        this.tagArea.appendChild(tagSpan);
        this.populateTagField();
        this.tempInput.focus();
      }
    }
    return this.resizeInput(e.charCode);
  };

  JSTagger.prototype.wrapperClicked = function(e) {
    e.stopPropagation();
    e.preventDefault();
    if (e.target.tagName === "SPAN" && e.target.className.indexOf("jstagger_tag") >= 0) {
      this.tempInput.value = e.target.innerText;
      e.target.remove();
    }
    if (e.target.tagName === "IMG" && e.target.className.indexOf("jstagger_close_btn") >= 0) {
      console.log('span clicked');
      e.target.parentNode.remove();
    }
    this.populateTagField();
    this.resizeInput();
    return this.tempInput.focus();
  };

  return JSTagger;

})();
